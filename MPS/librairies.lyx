#LyX 1.5.3 created this file. For more info see http://www.lyx.org/
\lyxformat 276
\begin_document
\begin_header
\textclass book
\begin_preamble

\end_preamble
\language french
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\paperfontsize default
\spacing single
\papersize default
\use_geometry false
\use_amsmath 2
\use_esint 0
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\bullet 0 0 1 5
\bullet 2 0 1 -1
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Section
Modularité; compilation séparée
\end_layout

\begin_layout Standard
Un programme doit réaliser un traitement sur un ensemble d'informations.
 Ce traitement peut se décomposer en traitements élémentaires.
 Chaque traitement élémentaire peut, soit étre autonome et faire l'objet
 d'un programme, soit être nécessaïre à un traitement plus complexe et définir
 alors une procédure d'un programme.
 Un programme élémentaire contiendra donc un ensemble de procédure nécessaire
 à son exécution.
 Ces procédures sont définies de manière indépendante du programme principal
 du point de vue algorithmique.
 Seule la définition des paramètres et les objectifs de la procédure sont
 nécessaires au programme principal.
 Le programme écrit dans un langage est contenu dans un fichier.
 Ce fichier peut contenir toutes les procédures nécessaires au programme
 principal.
 Dans ce cas la compilation peut produire un programme exécutable directement.
 Lorsque l'application est importante cette démarche conduit à des fichiers
 volumineux contenant un nombre important de procédures.
 L'inconvénient majeur réside dans la difficulté de manipuler alors de tel
 fichier, de l'augmentation très importante du temps de compilation, et
 de la difficulté de la mise au point.
 Les procédures peuvent par contre étre définies dans d'autres fichiers,
 étre compilées séparément, et étre ajoutées au programme principal en fin
 de processus.
 Dans ce cas les compilations du programme principal et des procédures sont
 asynchrones et le résultat ne peut être un programme exécutable.
 Aussi la compilation fournit un objet intermédiaire appelé module.
 Les modules doivent être alors regroupés pour pouvoir définir le programme
 ezécutable.
 Cette opération est réalisée pa:v un éditeur de liens.
\end_layout

\begin_layout Standard
Exemple:
\end_layout

\begin_layout Standard
Le programme:
\end_layout

\begin_layout LyX-Code
main(int argv,char **argp){
\end_layout

\begin_layout LyX-Code
    char *p;
\end_layout

\begin_layout LyX-Code
    p = argp[1]; 
\end_layout

\begin_layout LyX-Code
    while(*p 1= '
\backslash
0') 
\end_layout

\begin_layout LyX-Code
        if (Min(*p))
\end_layout

\begin_layout LyX-Code
            Maj(*p++); 
\end_layout

\begin_layout LyX-Code
        else p++;
\end_layout

\begin_layout LyX-Code
    return; 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
Min(char *a) {
\end_layout

\begin_layout LyX-Code
    return(*a & 0x20); 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
Maj (char *a) {
\end_layout

\begin_layout LyX-Code
    *a &= OXDF ;
\end_layout

\begin_layout LyX-Code
    return;
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout Standard
Ce programme définit trois fonctions:
\end_layout

\begin_layout Itemize
- La fonction principale 
\family typewriter
main()
\end_layout

\begin_layout Itemize
- La fonction de test de minuscule 
\family typewriter
Min()
\end_layout

\begin_layout Itemize
- La fonction de passage en majuscule 
\family typewriter
Maj()
\end_layout

\begin_layout Standard
Ces trois fonctions peuvent étre contenues dans le même fichier et compilées
 ensemble.
 Elles peuvent également être définies dans tsois fichiers différents.
 La compilation fournit alors trois modules:
\end_layout

\begin_layout Itemize
- Le module principal 
\end_layout

\begin_layout Itemize
- le module Min
\end_layout

\begin_layout Itemize
- le module Maj
\end_layout

\begin_layout Standard
Pour obtenir un programme exécutable il est alors nécessaire d'ajouter les
 deux modules Min et Maj au module principal et de réaliser le lien entre
 ces trois programmes.
 En effet dans le module principal le compilateur a placé au point adéquat
 une référence signifiant un appel à un programme encore inconnu.
 Cette référence doit être résolue, c'est à dire être défine par l'adjonction
 du module correspondant, pour que le programme soit exécutable.
\end_layout

\begin_layout Standard
Avec la compilation séparée la notion de référence externe doit également
 être étendue aux variables.
 Dans le langage C on distingue deux types de variables externes: les variables
 externes aux procédures mais connues que dans un seul fichier et son module
 résultant, et les variables externes succeptibles d'être référencées dans
 n'importe quel fichier.
\end_layout

\begin_layout Standard
Exemple:
\end_layout

\begin_layout Standard
Le programme précédent peut être modifié pour illustrer ces deux cas de
 variables.
 Ce programme est défini dans deux fichiers.
 
\end_layout

\begin_layout Description
remarque: Dans l'exemple qui suit l'utilisation de la variable intermodule
 p est réalisée pour les besoins de l'exemple; il ne faux surtous pas faire
 se genre de chose si on y est pas contraint!
\end_layout

\begin_layout Standard
fichier 1: main.c
\end_layout

\begin_layout Standard
char *p;
\end_layout

\begin_layout LyX-Code
main(argv,argp)
\end_layout

\begin_layout LyX-Code
int argv;
\end_layout

\begin_layout LyX-Code
char **argp;
\end_layout

\begin_layout LyX-Code
{
\end_layout

\begin_layout LyX-Code
    p = argp(1); 
\end_layout

\begin_layout LyX-Code
    while(*p != '
\backslash
0') 
\end_layout

\begin_layout LyX-Code
        if (Min())
\end_layout

\begin_layout LyX-Code
             Maj(); 
\end_layout

\begin_layout LyX-Code
        else p++;
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
On compile cc -c main.c (genère main.o)
\end_layout

\begin_layout LyX-Code
on réalise l'edition de lien on optient
\end_layout

\begin_layout Standard
\begin_inset Include \verbatiminput{MPS/expgmc/ldmain}
preview false

\end_inset


\end_layout

\begin_layout Standard
en effet les fonction Min et Max ne sont pas definies dans mian.c
\end_layout

\begin_layout Standard
fichier 2: module.c
\end_layout

\begin_layout LyX-Code
static char MQ = 0x20; /* variable locale*/
\end_layout

\begin_layout LyX-Code
extern char *p; /* variable externe 
\begin_inset Formula $\exists$
\end_inset

 dans 
\end_layout

\begin_layout LyX-Code
                   un autre module */
\end_layout

\begin_layout LyX-Code
Min() {
\end_layout

\begin_layout LyX-Code
    return(*p & MQ);
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
Maj (){
\end_layout

\begin_layout LyX-Code
    *P &= ~MQ; 
\end_layout

\begin_layout LyX-Code
    return; 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
On compile cc -c module.c
\end_layout

\begin_layout LyX-Code
L'edition de lien
\end_layout

\begin_layout LyX-Code
gcc -o montest main.o module.o
\end_layout

\begin_layout LyX-Code
gcc -o avec que des fichiers.o ou librairie est equivalent à ld en y incluant
 toutes les librairies standard
\end_layout

\begin_layout Standard
La variable p est une variable externe elle est par conséquent connue de
 toutes les fonctions ( principale, Min et Maj).
 La variable MQ est une variable également externe.
 Son champ d'accessibilité est cependanl limité su fichier ou elle est déclarée.
 On remarquera aussi qu'irl es~ important de distinguer la définition et
 la déclaration d'une variabl~ externe.
 Dans le fichier 1 la variable p est définie.
 Une place mémoir~ lui est alors attribuée.
 Dans le fichier 2 cette même variable es~ déclarée.
 Cela signifie qu'elle ne sera pas créée par ce fichier.
 Le; références à cette variable dans ce fichier seront considérées commi
 des références à la variable du premier fichier.
\end_layout

\begin_layout Section
3.2 Les bibliothèques statiques
\end_layout

\begin_layout Standard
Dans un système de dévelopement du logiciel il existe un très gram nombre
 de modules.
 Chaque module réalise une fonction élémentairi particulière.
 Le nombre de modules implique une organisation.
 Cetti organisation utilise un regroupement de modules dans un seul fichier
 Ce fichier comportant cet ensemble est appelé bibliothèque.
 L'éditeu: de liens extrait d'une bibliothèque les seuls modules nécessaires
 à la production d'un programme.
 Les fonctions de gestion d'une bibliothèqm sont:
\end_layout

\begin_layout Standard
- la création
\end_layout

\begin_layout Standard
- l'ajout d'un composant
\end_layout

\begin_layout Standard
- la suppression d'un composant
\end_layout

\begin_layout Standard
- la modification d'un composant (fonction combinant les deux dernières
 )
\end_layout

\begin_layout Standard
- l'extraction d'un composant
\end_layout

\begin_layout Standard
- la liste du contenu de la bibliothèque
\end_layout

\begin_layout Standard
Dans le système UNIX les bibliothèques sont gérées par la commande "ar".
 Les différentes fonctions à exécuter pour la gestion d'une bibliothèque
 sont définies comme paramètre de cette commande.
 Lorsque l'éditeur de liens lit un fichier bibliothèque il intègre dans
 le programme exécutable résultant les seules parties de cette bibliothèque
 qui sont nécessaires à résoudre des références externes.
\end_layout

\begin_layout Standard
Exemple: La compilation du programme précédant avec bibliothèque nécessite
 les commandes suivantes:
\end_layout

\begin_layout Standard
compilation des modules Maj et Min et production de deux modules: cc -c
 Maj.c
\end_layout

\begin_layout Standard
cc -c Min.c
\end_layout

\begin_layout Standard
création de la bibliothèque contenant ces deux modules: ar cr bibl.a Maj.o
 Min.o
\end_layout

\begin_layout Standard
rm Maj.o Min.o
\end_layout

\begin_layout Standard
compilation du module principal: cc -c princ.c
\end_layout

\begin_layout Standard
edition de liens: (avec GNU C)
\end_layout

\begin_layout Standard
gcc -o princ princ.o bibl.a 
\end_layout

\begin_layout Standard
Le programme princ est alors exécutable.
\end_layout

\begin_layout Standard
La bibliothèque comportant les modules standard sous UNIX est "libc.a".
 D'autres bibliothèques plus spécialisées existent également.
 Parmi celles-ci on peut citer la bibliothèque contenant les fonctions mathémati
ques standard, la bibliothèque contenant les fonctions de gestion d'écran,
 etc..
\end_layout

\begin_layout Section
Librairie dynamique
\end_layout

\begin_layout Standard
commençons par un exemple
\end_layout

\begin_layout Standard
Fichier libhello.c
\end_layout

\begin_layout Standard

\lyxline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vspace{-1
\backslash
parskip}
\end_layout

\begin_layout Standard

\end_layout

\end_inset


\begin_inset Include \verbatiminput{Dinamique/libhello.c}
preview false

\end_inset

Fichier libhello.h
\end_layout

\begin_layout Standard

\lyxline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vspace{-1
\backslash
parskip}
\end_layout

\begin_layout Standard

\end_layout

\end_inset


\begin_inset Include \verbatiminput{Dinamique/libhello.h}
preview false

\end_inset


\end_layout

\begin_layout Standard
fichier loadhello.c
\end_layout

\begin_layout Standard

\lyxline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vspace{-1
\backslash
parskip}
\end_layout

\begin_layout Standard

\end_layout

\end_inset


\begin_inset Include \verbatiminput{Dinamique/loadhello.c}
preview false

\end_inset

fichier usehello.c
\end_layout

\begin_layout Standard

\lyxline

\begin_inset ERT
status collapsed

\begin_layout Standard


\backslash
vspace{-1
\backslash
parskip}
\end_layout

\begin_layout Standard

\end_layout

\end_inset


\begin_inset Include \verbatiminput{Dinamique/usehello.c}
preview false

\end_inset


\end_layout

\begin_layout Standard
et le Makefile suivant:
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
\begin_inset Include \verbatiminput{Dinamique/Makefile}
preview false

\end_inset


\end_layout

\begin_layout Subsection
Nom des librairies
\end_layout

\begin_layout Standard
soname,nom: permet de nommer la librairie vous voyer le nom de la libraririe
 necessaire quand vous faite ldd executtable
\end_layout

\begin_layout Subsection
Utilser la librairie
\end_layout

\begin_layout Standard
au moment de la génération de l'exécutable l'option -lX indique que l'on
 souhaite utiliser la libraririe dynamisque libx.so (c'est une vérification)
\end_layout

\begin_layout Subsection
Le chargement dynamique à l'éxécution
\end_layout

\begin_layout Subsection
Les commande ldd et ldconfig
\end_layout

\begin_layout Subsubsection
ldd
\end_layout

\begin_layout Standard
NOM ldd - afficher les dépendances à des librairies partagées
\end_layout

\begin_layout Standard
SYNOPSIS ldd [-vVdr] programme ...
\end_layout

\begin_layout Standard
DESCRIPTION ldd affiche le nom des librairies partagées requises par chaque
 pro- gramme spécifié sur la ligne de commandes.
\end_layout

\begin_layout Standard
Pour les programmes a.out, ldd n'effectue qu'un fork et un exec pour chaque
 programme avec un argc (nombre d'arguments) égal à zéro.
 L'éditeur de liens dynamiques de a.out, ld.so, qui charge normalement les
 librairies partagées, détecte ce cas spécial et affiche les dépen- dances.
\end_layout

\begin_layout Standard
Pour les programmes ELF, ldd effectue un fork et un exec pour chaque programme
 avec les variables d'environnement positionnées correctement.
 L'éditeur de liens dynamiques de ELF, ld-linux.so, qui charge normale- ment
 les librairies partagées, détecte ce cas spécial et affiche les dépendances.
\end_layout

\begin_layout Standard
OPTIONS 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-v Afficher le numéro de version de ldd.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-V Afficher le numéro de version de l'éditeur de liens dynamiques, ld.so.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-d Effectuer des relogements et rapporter toutes les fonctions man- quantes
 (ELF uniquement).
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-r Effectuer des relogements pour les objets de données ET pour les fonctions,
 et rapporter tous les objets manquants (ELF unique- ment).
 
\end_layout

\begin_layout Subsubsection
ldconfig
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
NAME ldconfig - determine les assocition dynamique au runtime
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
SYNOPSIS ldconfig [OPTION...]
\end_layout

\begin_layout Standard
DESCRIPTION ldconfig creates the necessary links and cache (for use by the
 run-time linker, ld.so) to the most recent shared libraries found in the
 direc- tories specified on the command line, in the file /etc/ld.so.conf,
 and in the trusted directories (/usr/lib and /lib).
 ldconfig checks the header and file names of the libraries it encounters
 when determining which versions should have their links updated.
 ldconfig ignores sym- bolic links when scanning for libraries.
\end_layout

\begin_layout Standard
ldconfig will attempt to deduce the type of ELF libs (ie.
 libc5 or libc6/glibc) based on what C libs if any the library was linked
 against, therefore when making dynamic libraries, it is wise to explic-
 itly link against libc (use -lc).
\end_layout

\begin_layout Standard
Some existing libs do not contain enough information to allow the deduction
 of their type, therefore the /etc/ld.so.conf file format allows the specification
 of an expected type.
 This is only used for those ELF libs which we can not work out.
 The format is like this "dirname=TYPE", where type can be libc4, libc5
 or libc6.
 (This syntax also works on the command line).
 Spaces are not allowed.
 Also see the -p option.
\end_layout

\begin_layout Standard
Directory names containing an = are no longer legal unless they also have
 an expected type specifier.
\end_layout

\begin_layout Standard
ldconfig should normally be run by the super-user as it may require write
 permission on some root owned directories and files.
 It is nor- mally run automatically at bootup, from /etc/rc, or manually
 whenever new DLL's are installed.
 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
OPTIONS 
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-v --verbose Verbose mode.
 Print current version number, the name of each directory as it is scanned
 and any links that are created.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-n Only process directories specified on the command line.
 Don't process the trusted directories (/usr/lib and /lib) nor those specified
 in /etc/ld.so.conf.
 Implies -N.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-N Don't rebuild the cache.
 Unless -X is also specified, links are still updated.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-X Don't update links.
 Unless -N is also specified, the cache is still rebuilt.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-f conf Use conf instead of /etc/ld.so.conf.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-C cache Use cache instead of /etc/ld.so.cache.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-r root Change to and use root as the root directory.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-l Library mode.
 Manually link individual libraries.
 Intended for use by experts only.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-p --print-cache Print the lists of directories and candidate libraries
 stored in the current cache.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-c --format=FORMAT Use FORMAT for the cache file.
 Choices are old, new and compat (the default).
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-? --help --usage Print usage information.
\end_layout

\begin_layout List
\labelwidthstring 00.00.0000
-V --version Print version and exit.
 
\end_layout

\begin_layout LyX-Code

\end_layout

\end_body
\end_document
