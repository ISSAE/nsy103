#LyX 1.2 created this file. For more info see http://www.lyx.org/
\lyxformat 220
\textclass book
\begin_preamble
\usepackage {stmaryrd}
\usepackage{ulem}
\usepackage{arabtex}
\rhead[\leftmark]{\thepage}
\lhead[\thepage]{\rightmark}
\lfoot{Pascal Farès © }
\cfoot{ISAE 2003}
\rfoot{\today}
\renewcommand{\footrulewidth}{0.4pt}
\newcommand{\deq}{$\triangleq$}
\end_preamble
\language french
\inputencoding auto
\fontscheme default
\graphics default
\paperfontsize default
\spacing single 
\papersize a4paper
\paperpackage a4
\use_geometry 1
\use_amsmath 0
\use_natbib 0
\use_numerical_citations 0
\paperorientation portrait
\secnumdepth 2
\tocdepth 2
\paragraph_separation skip
\defskip smallskip
\quotes_language english
\quotes_times 2
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\bullet 0
	1
	1
	-1
\end_bullet

\layout Title
\added_space_bottom 0.3cm 
Méthodologie de programmation système
\newline 
Support pour les ED 
\begin_inset Graphics FormatVersion 1
	filename imm1.ps
	display color
	size_type 0
	rotateOrigin leftBaseline
	lyxsize_type 1
	lyxwidth 376pt
	lyxheight 324pt
\end_inset 


\newline 
Complément de cours
\layout Author

Pascal Farès 
\newline 
<bAskAl fAris>
\newline 
ISAE 2003
\newline 
<ma`had al`olOm alta.tbIqqiT>
\newline 

\begin_inset Foot
collapsed false

\layout Standard

Centre associé CNAM de Beyrouth (Liban)
\end_inset 

 
\layout Date


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
today
\end_inset 


\layout Standard

Ce document contient le matériel nécessaire pour les ED système.
 Il rappel ou décrit toutes les notions et concepts nécessaires pour la
 réalisation de petites applications utilisant les concepts liés aux systèmes
 multi-utilisateurs et multi-tâche (processus, thread, sémaphores, signaux,
 E/S,...).
 Nous y faisons une brève introduction au langage C dans ses aspects 
\begin_inset Quotes eld
\end_inset 

programmation système
\begin_inset Quotes erd
\end_inset 

; de même que sont présent un ensemble d'outils utilisé dans le cadre de
 réalisation d'applications dans l'environnement UNIX( particulièrement
 Linux noyau > 2.2) tel que : Makefile, automake, les package RPM, le script
 shell et PERL,...
\layout Standard


\begin_inset LatexCommand \tableofcontents{}

\end_inset 


\layout Part

Les systèmes Unix, panorama
\layout Chapter

Présentation d'Unix
\layout Standard


\begin_inset Include \input{CH1.lyx}

\end_inset 


\layout Chapter

Les commandes de base
\layout Standard


\begin_inset Include \input{ch2.lyx}

\end_inset 


\layout Part

Développement d'application Linux
\layout Chapter

Le langage C
\layout Standard


\begin_inset Include \input{langc.lyx}

\end_inset 


\layout Chapter

Les outils de développement
\layout Section

Les editeurs
\layout Subsection

VI et gvim
\layout Standard


\begin_inset Include \input{Vim-HOWTO.lyx}

\end_inset 


\layout Subsection

xemacs et emacs
\layout Standard

Il existe deux versions d'emacs la version X windows et la version alphanumériqu
e
\layout Standard


\begin_inset Include \input{emacs.lyx}

\end_inset 


\layout Section

Le Makefile
\layout Standard

make - utilitaire GNU make pour maintenir des groupes de programmes
\layout Standard

make [ -f makefile ] [ option ] ...
 target ...
 
\layout Standard

Le but de l'utilitaire _m_a_k_e est de déterminer automatiquement quelles
 parties d'un gros programme ont besoin d'être recompilées, et exécute les
 commandes nécessaires pour les recompiler.
 Le manuel décrit l'implémentation GNU de _m_a_k_e, qui a été écrite par
 Richard Stallman et Roland McGrath.
 Nos exemples montrent des programmes C, puisqu'ils sont les plus courants,
 mais vous pouvez utiliser _m_a_k_e avec n'importe quel langage de programmation
 dont le compilateur peut être lancé en tant que commande shell.
 En fait, _m_a_k_e n'est pas limité aux seuls pro- grammes.
 Vous pouvez l'utiliser pour décrire n'importe quelle tâche dans laquelle
 certains fichiers doivent être mis à jour automatiquement à partir d'autres
 fichiers quand ceux-ci sont modifiés.
\layout Standard

Avant d'utiliser _m_a_k_e, vous devez écrire un fichier appelé _m_a_k_e_f_i_l_e
 qui décrit les relations entre les fichiers de votre programme, et qui
 fournit les commandes nécessaires à la mise à jour de chaque fichier.
 Dans un programme, le fichier exécutable sera typiquement mis à jour à
 partir de fichiers objets, qui sont eux-mêmes créés en compilant des fichiers
 sources.
\layout Standard

Quand un fichier makefile adéquat existe, chaque fois que vous modi- fierez
 certains fichiers sources, cette simple commande shell : 
\layout Standard

make
\layout Standard

suffira pour effectuer toutes les recompilations nécessaires.
 Le pro- gramme _m_a_k_e utilise la base de données du makefile et les dates
 de dernière modification des fichiers pour décider quels fichiers doivent
 être mis à jour.
 Pour chacun de ces fichiers, il exécute les commandes enregistrées dans
 la base de données.
\layout Standard

_m_a_k_e exécute les commandes du _m_a_k_e_f_i_l_e pour mettre à jour un
 ou plusieurs _n_o_m_s de cibles, où _n_o_m est typiquement un programme.
 Si aucune option --ff n'est présente, _m_a_k_e recherchera les makefiles
 _G_N_U_- _m_a_k_e_f_i_l_e, _m_a_k_e_f_i_l_e, et _M_a_k_e_f_i_l_e, dans
 cet ordre.
\layout Standard

Normalement, vous devriez nommer votre makefile en _m_a_k_e_f_i_l_e ou _M_a_k_e_
- _f_i_l_e.
 (Nous recommandons _M_a_k_e_f_i_l_e car il apparaît de façon bien visi-
 ble près du début du listing d'un répertoire, juste à côté d'autres fichiers
 importants comme _R_E_A_D_M_E.) Le premier nom recherché, _G_N_U_m_a_k_e_-
 _f_i_l_e, n'est pas recommandé pour la plupart des makefiles.
 Vous ne devriez utiliser ce nom que si vous avez un makefile qui est spécifique
 au _m_a_k_e GNU, et qui ne sera pas compris par d'autres versions de _m_a_k_e.
 Si _m_a_k_e_f_i_l_e est « - », l'entrée standard est lue.
\layout Standard

_m_a_k_e met à jour une cible si elle dépend de fichiers prérequis qui ont
 été modifiés depuis la dernière modification de la cible, ou si la cible
 n'existe pas.
\layout Standard

OOPPTTIIOONNSS --bb
\layout Standard

--mm Ces options sont ignorées, et sont présentes pour assurer la com- patibilit
é avec d'autres versions de _m_a_k_e.
\layout Standard

--CC _r_é_p Se déplacer dans le répertoire _r_é_p avant de lire les makefiles
 ou de faire quoi que ce soit d'autre.
 Si de multiples options --CC sont spécifiées, chacune d'entre elles est
 interprétée relativement à la précédente : --CC / --CC etc est équivalent
 à --CC /etc.
 Cela est typiquement utilisé lors d'invocations récursives de _m_a_k_e.
\layout Standard

--dd Afficher des informations de débogage en plus du traitement nor- mal.
 Les informations de débogage indiquent quels fichiers sont évalués pour
 la reconstruction, quels dates de fichiers sont com- parées et avec quels
 résultats, quels fichiers ont réellement besoin d'être recréés, quelles
 règles implicites sont prises en compte et lesquelles sont appliquées --
 bref, tout ce qu'il y a d'intéressant à savoir sur la manière dont _m_a_k_e
 décide de ce qu'il a à faire.
\layout Standard

--ee Donner la priorité aux variables d'environnement par rapport aux variables
 des makefiles.
\layout Standard

--ff _f_i_c_h_i_e_r Utiliser _f_i_c_h_i_e_r en tant que makefile.
\layout Standard

--ii Ignorer toutes les erreurs dans les commandes exécutées pour reconstruire
 les fichiers.
\layout Standard

--II _r_é_p Spécifie un répertoire _r_é_p où il faut rechercher les makefiles
 inclus.
 Si plusieurs options --II sont utilisées pour spécifier plusieurs répertoires,
 les répertoires seront parcourus dans l'ordre spécifié.
 À la différence des autres drapeaux de _m_a_k_e, les répertoires fournis
 avec les drapeaux --II peuvent venir directement après le drapeau : --II_r_é_p
 est permis, tout comme --II _r_é_p_.
 Cette syntaxe est admise pour assurer la compatibilité avec le drapeau
 --II du préprocesseur C.
\layout Standard

--jj _t_r_a_v_a_u_x Spécifie le nombre de travaux (commandes) à exécuter
 simul- tanément.
 S'il y a plus d'une option --jj , seule la dernière sera utilisée.
 Si l'option --jj est fournie sans argument, _m_a_k_e ne lim- itera pas
 le nombre de travaux qui peuvent être exécutés simul- tanément.
\layout Standard

--kk Continuer autant que possible après une erreur.
 Même si la création de la cible a échoué (et donc celle des cibles qui
 en dépendent), les autres dépendances de ces cibles peuvent être traitées
 de la même façon.
\layout Standard

--ll
\layout Standard

--ll _c_h_a_r_g_e Spécifier qu'aucun nouveau travail (commande) ne doit
 être com- mencé s'il y a d'autres travaux en cours d'exécution et que la
 charge moyenne est _c_h_a_r_g_e (un nombre en virgule flottante).
 Sans argument, cette option supprime une limite de charge fournie antérieuremen
t.
\layout Standard

--nn Afficher les commandes qui doivent être exécutées, mais ne pas les
 exécuter réellement.
\layout Standard

--oo _f_i_c_h_i_e_r Ne pas reconstruire le _f_i_c_h_i_e_r même s'il est
 plus ancien que ses dépendances, et ne pas reconstruire quoi que ce soit
 à cause de modifications dans _f_i_c_h_i_e_r.
 Le fichier est essentiellement traité comme étant très âgé et ses règles
 sont ignorées.
\layout Standard

--pp Afficher la base de données (règles et valeurs des variables) qui résultent
 de la lecture des makefiles ; ensuite exécuter la com- mande comme elle
 est spécifiée.
 Cela affiche également le numéro de version fourni par l'interrupteur --vv
 (voir en dessous).
 Pour afficher la base de données sans essayer de reconstruire un seul fichier,
 utilisez mmaakkee --pp --ff_/_d_e_v_/_n_u_l_l_.
\layout Standard

--qq « Mode question ».
 Ne pas lancer de commandes, ni afficher quoi que ce soit, mais uniquement
 renvoyer une valeur de retour qui vaut 0 si les cibles spécifiées sont
 déjà à jour, ou une valeur non nulle sinon.
\layout Standard

--rr Interdire l'utilisation des règles implicites intégrées.
 Effacer également la liste des suffixes par défaut pour les règles sur
 les suffixes.
\layout Standard

--ss Opération silencieuse ; ne pas afficher les commandes quand elles sont
 exécutées.
\layout Standard

--SS Annuler l'effet de l'option --kk ..
 Cela n'est jamais nécessaire sauf pour un _m_a_k_e récursif où --kk peut
 être hérité à partir du _m_a_k_e du plus haut niveau via MAKEFLAGS, ou
 si vous fournissez --kk dans la variable MAKEFLAGS de votre environnement.
\layout Standard

--tt « Touch »er les fichiers (les marquer comme étant à jour sans réellement
 les modifier) au lieu d'exécuter leurs commandes.
 Cela est utilisé pour faire croire à make que les commandes ont été exécutées,
 afin de tromper les invocations futures de _m_a_k_e.
\layout Standard

--vv Afficher le numéro de version de _m_a_k_e , un copyright, une liste
 des auteurs et une notice indiquant qu'il n'y a aucune garantie.
\layout Standard

--ww Afficher un message contenant le répertoire de travail avant et après
 d'autres traitements.
 Cela peut être utile pour débusquer des erreurs se produisant dans des
 imbrications compliquées de commandes _m_a_k_e récursives.
\layout Standard

--WW _f_i_c_h_i_e_r Faire croire que le _f_i_c_h_i_e_r cible vient juste
 d'être modifié.
 Quand c'est utilisé avec le drapeau --nn , cela montre ce qui se passerait
 si vous modifiiez ce fichier.
 Sans --nn, c'est presque la même chose que d'exécuter la commande _t_o_u_c_h
 sur le fichier donné avant de lancer make, sauf que la date de modification
 n'est mod- ifiée que dans l'imagination de make.
\layout Standard


\begin_inset Include \input{make.lyx}

\end_inset 


\layout Section

autogen; autoconf; automake
\layout Section

RCS
\layout Standard


\begin_inset Include \input{rcs.lyx}

\end_inset 


\layout Section

CVS
\layout Section

Ecrire des man
\layout Chapter

Le compilateur gcc
\layout Standard


\begin_inset Include \include{gcc.lyx}

\end_inset 


\layout Chapter

Notion de librairies
\layout Standard


\begin_inset Include \include{librairies.lyx}

\end_inset 


\layout Chapter

L'environnement de développement
\layout Part

Programmation système
\layout Chapter

Le modèle de processus
\layout Standard


\begin_inset Include \input{ipc.lyx}

\end_inset 


\layout Chapter

Introduction au threads Linux
\layout Standard


\begin_inset Include \input{threads.lyx}

\end_inset 


\layout Chapter

Gestion des entrées/sorties
\layout Chapter

Gestion des signaux
\layout Chapter

Contrôler les tâches
\layout Chapter

gestion du temps
\layout Standard


\begin_inset ERT
status Collapsed

\layout Standard

\backslash 
appendix
\end_inset 


\layout Part

Compléments
\layout Chapter

La librairie de string
\layout Chapter

gestion du terminal
\layout Chapter

base de donnée native
\layout Chapter

parser la ligne de commande
\layout Chapter

chargement dynamique à l'exécution
\the_end
