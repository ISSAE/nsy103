PRINTF(3)                 Linux Programmer's Manual                 PRINTF(3)



NNAAMMEE
       printf,  fprintf,  sprintf,  snprintf,  vprintf,  vfprintf,  vsprintf,
       vsnprintf - formatted output conversion

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttddiioo..hh>>

       iinntt pprriinnttff((ccoonnsstt cchhaarr **_f_o_r_m_a_t,, ......));;
       iinntt ffpprriinnttff((FFIILLEE **_s_t_r_e_a_m,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, ......));;
       iinntt sspprriinnttff((cchhaarr **_s_t_r,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, ......));;
       iinntt ssnnpprriinnttff((cchhaarr **_s_t_r,, ssiizzee__tt _s_i_z_e,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, ......));;

       ##iinncclluuddee <<ssttddaarrgg..hh>>

       iinntt vvpprriinnttff((ccoonnsstt cchhaarr **_f_o_r_m_a_t,, vvaa__lliisstt _a_p));;
       iinntt vvffpprriinnttff((FFIILLEE **_s_t_r_e_a_m,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, vvaa__lliisstt _a_p));;
       iinntt vvsspprriinnttff((cchhaarr **_s_t_r,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, vvaa__lliisstt _a_p));;
       iinntt vvssnnpprriinnttff((cchhaarr **_s_t_r,, ssiizzee__tt _s_i_z_e,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, vvaa__lliisstt _a_p));;

   Feature Test Macro Requirements for glibc (see ffeeaattuurree__tteesstt__mmaaccrrooss(7)):

       ssnnpprriinnttff(), vvssnnpprriinnttff():
           _BSD_SOURCE || _XOPEN_SOURCE >= 500 || _ISOC99_SOURCE ||
           _POSIX_C_SOURCE >= 200112L;
           or _c_c _-_s_t_d_=_c_9_9

DDEESSCCRRIIPPTTIIOONN
       The  functions  in  the  pprriinnttff() family produce output according to a
       _f_o_r_m_a_t as described below.  The functions pprriinnttff() and vvpprriinnttff() write
       output to _s_t_d_o_u_t, the standard output stream; ffpprriinnttff() and vvffpprriinnttff()
       write output  to  the  given  output  _s_t_r_e_a_m;  sspprriinnttff(),  ssnnpprriinnttff(),
       vvsspprriinnttff() and vvssnnpprriinnttff() write to the character string _s_t_r.

       The  functions  ssnnpprriinnttff()  and  vvssnnpprriinnttff()  write at most _s_i_z_e bytes
       (including the terminating null byte ('\0')) to _s_t_r.

       The  functions  vvpprriinnttff(),  vvffpprriinnttff(),  vvsspprriinnttff(),  vvssnnpprriinnttff()  are
       equivalent   to   the   functions   pprriinnttff(),   ffpprriinnttff(),  sspprriinnttff(),
       ssnnpprriinnttff(), respectively, except that they are called with  a  _v_a___l_i_s_t
       instead  of  a  variable  number of arguments.  These functions do not
       call the _v_a___e_n_d macro.  Because they  invoke  the  _v_a___a_r_g  macro,  the
       value of _a_p is undefined after the call.  See ssttddaarrgg(3).

       These  eight  functions write the output under the control of a _f_o_r_m_a_t
       string that specifies how subsequent arguments (or arguments  accessed
       via  the  variable-length  argument  facilities of ssttddaarrgg(3)) are con‐
       verted for output.

       C99 and POSIX.1-2001 specify that the results are undefined if a  call
       to sspprriinnttff(), ssnnpprriinnttff(), vvsspprriinnttff(), or vvssnnpprriinnttff() would cause copy‐
       ing to take place between objects that overlap (e.g.,  if  the  target
       string array and one of the supplied input arguments refer to the same
       buffer).  See NOTES.

   RReettuurrnn vvaalluuee
       Upon successful return, these functions return the number  of  charac‐
       ters printed (excluding the null byte used to end output to strings).

       The  functions  ssnnpprriinnttff() and vvssnnpprriinnttff() do not write more than _s_i_z_e
       bytes (including the terminating null byte ('\0')).  If the output was
       truncated  due  to  this  limit then the return value is the number of
       characters (excluding the terminating null byte) which would have been
       written to the final string if enough space had been available.  Thus,
       a return value of _s_i_z_e or more means that the  output  was  truncated.
       (See also below under NOTES.)

       If an output error is encountered, a negative value is returned.

   FFoorrmmaatt ooff tthhee ffoorrmmaatt ssttrriinngg
       The  format  string is a character string, beginning and ending in its
       initial shift state, if any.  The format string is composed of zero or
       more  directives:  ordinary  characters  (not  %%),  which  are  copied
       unchanged to the output stream; and conversion specifications, each of
       which  results  in  fetching  zero or more subsequent arguments.  Each
       conversion specification is introduced by the character  %%,  and  ends
       with  a _c_o_n_v_e_r_s_i_o_n _s_p_e_c_i_f_i_e_r.  In between there may be (in this order)
       zero or more _f_l_a_g_s, an optional minimum _f_i_e_l_d _w_i_d_t_h, an optional  _p_r_e_‐
       _c_i_s_i_o_n and an optional _l_e_n_g_t_h _m_o_d_i_f_i_e_r.

       The arguments must correspond properly (after type promotion) with the
       conversion specifier.  By default, the arguments are used in the order
       given,  where each '*' and each conversion specifier asks for the next
       argument (and it is an error  if  insufficiently  many  arguments  are
       given).   One  can also specify explicitly which argument is taken, at
       each place where an argument is required, by writing "%m$" instead  of
       '%'  and "*m$" instead of '*', where the decimal integer m denotes the
       position in the argument list of the desired argument, indexed  start‐
       ing from 1.  Thus,

           printf("%*d", width, num);

       and

           printf("%2$*1$d", width, num);

       are  equivalent.   The  second style allows repeated references to the
       same argument.  The C99 standard does not include the style using '$',
       which  comes  from  the Single UNIX Specification.  If the style using
       '$' is used, it must be used throughout for all conversions taking  an
       argument  and  all  width and precision arguments, but it may be mixed
       with "%%" formats which do not consume an argument.  There may  be  no
       gaps  in the numbers of arguments specified using '$'; for example, if
       arguments 1 and 3 are specified, argument 2  must  also  be  specified
       somewhere in the format string.

       For  some  numeric  conversions a radix character ("decimal point") or
       thousands' grouping character is  used.   The  actual  character  used
       depends  on  the LLCC__NNUUMMEERRIICC part of the locale.  The POSIX locale uses
       '.' as radix character, and does not have a grouping character.  Thus,

               printf("%'.2f", 1234567.89);

       results in "1234567.89" in the POSIX locale, in  "1234567,89"  in  the
       nl_NL locale, and in "1.234.567,89" in the da_DK locale.

   TThhee ffllaagg cchhaarraacctteerrss
       The character % is followed by zero or more of the following flags:

       ##      The  value  should  be converted to an "alternate form".  For oo
              conversions, the first character of the output string  is  made
              zero  (by prefixing a 0 if it was not zero already).  For xx and
              XX conversions, a nonzero result has the string  "0x"  (or  "0X"
              for  XX  conversions) prepended to it.  For aa, AA, ee, EE, ff, FF, gg,
              and GG conversions, the result will  always  contain  a  decimal
              point,  even  if no digits follow it (normally, a decimal point
              appears in the results of those conversions  only  if  a  digit
              follows).   For  gg  and  GG  conversions, trailing zeros are not
              removed from the result as they would otherwise be.  For  other
              conversions, the result is undefined.

       00      The  value  should be zero padded.  For dd, ii, oo, uu, xx, XX, aa, AA,
              ee, EE, ff, FF, gg, and GG conversions, the converted value is padded
              on  the  left  with  zeros  rather than blanks.  If the 00 and --
              flags both appear, the 00 flag is ignored.  If  a  precision  is
              given  with  a numeric conversion (dd, ii, oo, uu, xx, and XX), the 00
              flag is ignored.  For other conversions, the behavior is  unde‐
              fined.

       --      The  converted value is to be left adjusted on the field bound‐
              ary.  (The default is right justification.)  Except for nn  con‐
              versions,  the  converted  value  is  padded  on the right with
              blanks, rather than on the left with  blanks  or  zeros.   A  --
              overrides a 00 if both are given.

       '' ''    (a  space)  A blank should be left before a positive number (or
              empty string) produced by a signed conversion.

       ++      A sign (+ or -) should always be placed before  a  number  pro‐
              duced  by  a signed conversion.  By default a sign is used only
              for negative numbers.  A ++ overrides a space if both are used.

       The five flag characters above are defined in  the  C  standard.   The
       SUSv2 specifies one further flag character.

       ''      For  decimal  conversion (ii, dd, uu, ff, FF, gg, GG) the output is to
              be grouped with thousands' grouping characters  if  the  locale
              information  indicates  any.  Note that many versions of ggcccc(1)
              cannot parse this option and will issue a warning.  SUSv2  does
              not include _%_'_F.

       glibc 2.2 adds one further flag character.

       II      For  decimal  integer  conversion (ii, dd, uu) the output uses the
              locale's alternative output digits, if any.  For example, since
              glibc  2.2.3  this will give Arabic-Indic digits in the Persian
              ("fa_IR") locale.

   TThhee ffiieelldd wwiiddtthh
       An optional decimal digit string (with nonzero first digit) specifying
       a  minimum  field  width.  If the converted value has fewer characters
       than the field width, it will be padded with spaces on  the  left  (or
       right, if the left-adjustment flag has been given).  Instead of a dec‐
       imal digit string one may write "*" or "*m$" (for some decimal integer
       _m)  to  specify that the field width is given in the next argument, or
       in the _m-th argument, respectively, which must be of type _i_n_t.  A neg‐
       ative  field width is taken as a '-' flag followed by a positive field
       width.  In no case does a nonexistent or small field width cause trun‐
       cation  of  a  field;  if the result of a conversion is wider than the
       field width, the field is expanded to contain the conversion result.

   TThhee pprreecciissiioonn
       An optional precision, in the form of a period ('.')  followed  by  an
       optional  decimal digit string.  Instead of a decimal digit string one
       may write "*" or "*m$" (for some decimal integer m)  to  specify  that
       the  precision is given in the next argument, or in the m-th argument,
       respectively, which must be of type _i_n_t.  If the precision is given as
       just  '.', the precision is taken to be zero.  A negative precision is
       taken as if the precision were omitted.  This gives the minimum number
       of  digits  to appear for dd, ii, oo, uu, xx, and XX conversions, the number
       of digits to appear after the radix character for aa, AA, ee, EE, ff, and FF
       conversions, the maximum number of significant digits for gg and GG con‐
       versions, or the maximum number of characters to  be  printed  from  a
       string for ss and SS conversions.

   TThhee lleennggtthh mmooddiiffiieerr
       Here, "integer conversion" stands for dd, ii, oo, uu, xx, or XX conversion.

       hhhh     A  following integer conversion corresponds to a _s_i_g_n_e_d _c_h_a_r or
              _u_n_s_i_g_n_e_d _c_h_a_r argument, or a following nn conversion corresponds
              to a pointer to a _s_i_g_n_e_d _c_h_a_r argument.

       hh      A  following  integer  conversion corresponds to a _s_h_o_r_t _i_n_t or
              _u_n_s_i_g_n_e_d _s_h_o_r_t _i_n_t argument, or a following nn conversion corre‐
              sponds to a pointer to a _s_h_o_r_t _i_n_t argument.

       ll      (ell)  A following integer conversion corresponds to a _l_o_n_g _i_n_t
              or _u_n_s_i_g_n_e_d _l_o_n_g _i_n_t argument, or a following nn conversion cor‐
              responds  to a pointer to a _l_o_n_g _i_n_t argument, or a following cc
              conversion corresponds to a _w_i_n_t___t argument, or a  following  ss
              conversion corresponds to a pointer to _w_c_h_a_r___t argument.

       llll     (ell-ell).   A  following  integer  conversion corresponds to a
              _l_o_n_g _l_o_n_g _i_n_t or _u_n_s_i_g_n_e_d _l_o_n_g _l_o_n_g _i_n_t argument, or a  follow‐
              ing  nn  conversion  corresponds to a pointer to a _l_o_n_g _l_o_n_g _i_n_t
              argument.

       LL      A following aa, AA, ee, EE, ff, FF, gg, or GG conversion corresponds to
              a _l_o_n_g _d_o_u_b_l_e argument.  (C99 allows %LF, but SUSv2 does not.)

       qq      ("quad".  4.4BSD  and Linux libc5 only.  Don't use.)  This is a
              synonym for llll.

       jj      A following integer conversion corresponds to  an  _i_n_t_m_a_x___t  or
              _u_i_n_t_m_a_x___t argument.

       zz      A  following  integer  conversion  corresponds  to  a _s_i_z_e___t or
              _s_s_i_z_e___t argument.  (Linux libc5 has ZZ with this meaning.  Don't
              use it.)

       tt      A following integer conversion corresponds to a _p_t_r_d_i_f_f___t argu‐
              ment.

       The SUSv2 knows about only the length modifiers hh (in hhdd, hhii, hhoo,  hhxx,
       hhXX,  hhnn)  and  ll (in lldd, llii, lloo, llxx, llXX, llnn, llcc, llss) and LL (in LLee, LLEE,
       LLff, LLgg, LLGG).

   TThhee ccoonnvveerrssiioonn ssppeecciiffiieerr
       A character that specifies the type of conversion to be applied.   The
       conversion specifiers and their meanings are:

       dd, ii   The  _i_n_t argument is converted to signed decimal notation.  The
              precision, if any, gives the minimum number of digits that must
              appear;  if  the  converted  value requires fewer digits, it is
              padded on the left with zeros.  The  default  precision  is  1.
              When  0  is printed with an explicit precision 0, the output is
              empty.

       oo, uu, xx, XX
              The _u_n_s_i_g_n_e_d _i_n_t argument is converted to unsigned  octal  (oo),
              unsigned  decimal  (uu), or unsigned hexadecimal (xx and XX) nota‐
              tion.  The letters aabbccddeeff are used for xx conversions; the  let‐
              ters AABBCCDDEEFF are used for XX conversions.  The precision, if any,
              gives the minimum number of digits that  must  appear;  if  the
              converted value requires fewer digits, it is padded on the left
              with zeros.  The default precision is 1.   When  0  is  printed
              with an explicit precision 0, the output is empty.

       ee, EE   The  _d_o_u_b_l_e  argument  is  rounded  and  converted in the style
              [-]d..dddee±dd where there is one digit before the  decimal-point
              character  and  the  number  of digits after it is equal to the
              precision; if the precision is missing, it is taken  as  6;  if
              the  precision is zero, no decimal-point character appears.  An
              EE conversion uses the letter EE (rather than ee) to introduce the
              exponent.  The exponent always contains at least two digits; if
              the value is zero, the exponent is 00.

       ff, FF   The _d_o_u_b_l_e argument is rounded and converted to  decimal  nota‐
              tion  in the style [-]ddd..ddd, where the number of digits after
              the decimal-point character is equal to the precision  specifi‐
              cation.   If the precision is missing, it is taken as 6; if the
              precision  is  explicitly  zero,  no  decimal-point   character
              appears.   If  a  decimal  point  appears,  at  least one digit
              appears before it.

              (The SUSv2 does not know about FF and says that character string
              representations  for  infinity  and  NaN may be made available.
              The C99 standard specifies "[-]inf" or "[-]infinity" for infin‐
              ity, and a string starting with "nan" for NaN, in the case of ff
              conversion, and "[-]INF" or "[-]INFINITY" or "NAN*" in the case
              of FF conversion.)

       gg, GG   The _d_o_u_b_l_e argument is converted in style ff or ee (or FF or EE for
              GG conversions).  The precision specifies the number of signifi‐
              cant  digits.  If the precision is missing, 6 digits are given;
              if the precision is zero, it is treated as 1.  Style ee is  used
              if  the exponent from its conversion is less than -4 or greater
              than or equal to the precision.   Trailing  zeros  are  removed
              from the fractional part of the result; a decimal point appears
              only if it is followed by at least one digit.

       aa, AA   (C99; not in SUSv2) For aa conversion, the  _d_o_u_b_l_e  argument  is
              converted to hexadecimal notation (using the letters abcdef) in
              the style [-]00xxh..hhhhpp±; for AA conversion the  prefix  00XX,  the
              letters ABCDEF, and the exponent separator PP is used.  There is
              one hexadecimal digit before the decimal point, and the  number
              of digits after it is equal to the precision.  The default pre‐
              cision suffices for an exact representation of the value if  an
              exact  representation  in base 2 exists and otherwise is suffi‐
              ciently large to distinguish values of type _d_o_u_b_l_e.  The  digit
              before  the decimal point is unspecified for nonnormalized num‐
              bers, and nonzero but otherwise unspecified for normalized num‐
              bers.

       cc      If  no  ll modifier is present, the _i_n_t argument is converted to
              an _u_n_s_i_g_n_e_d _c_h_a_r, and the resulting character is  written.   If
              an  ll modifier is present, the _w_i_n_t___t (wide character) argument
              is converted to a multibyte sequence by  a  call  to  the  wwccrr‐‐
              ttoommbb(3)  function, with a conversion state starting in the ini‐
              tial state, and the resulting multibyte string is written.

       ss      If no ll modifier is  present:  The  _c_o_n_s_t  _c_h_a_r _*  argument  is
              expected to be a pointer to an array of character type (pointer
              to a string).  Characters from the array are written up to (but
              not  including)  a terminating null byte ('\0'); if a precision
              is specified, no more than the number  specified  are  written.
              If  a  precision is given, no null byte need be present; if the
              precision is not specified, or is greater than the size of  the
              array, the array must contain a terminating null byte.

              If  an  ll  modifier is present: The _c_o_n_s_t _w_c_h_a_r___t _* argument is
              expected to be a pointer to an array of wide characters.   Wide
              characters from the array are converted to multibyte characters
              (each by a call to the wwccrrttoommbb(3) function, with  a  conversion
              state starting in the initial state before the first wide char‐
              acter), up to and including a terminating null wide  character.
              The  resulting  multibyte characters are written up to (but not
              including) the terminating null byte.  If a precision is speci‐
              fied,  no more bytes than the number specified are written, but
              no partial multibyte characters are  written.   Note  that  the
              precision  determines the number of _b_y_t_e_s written, not the num‐
              ber of _w_i_d_e _c_h_a_r_a_c_t_e_r_s or _s_c_r_e_e_n  _p_o_s_i_t_i_o_n_s.   The  array  must
              contain  a  terminating null wide character, unless a precision
              is given and it is so small that the number  of  bytes  written
              exceeds it before the end of the array is reached.

       CC      (Not in C99, but in SUSv2.)  Synonym for llcc.  Don't use.

       SS      (Not in C99, but in SUSv2.)  Synonym for llss.  Don't use.

       pp      The _v_o_i_d _* pointer argument is printed in hexadecimal (as if by
              %%##xx or %%##llxx).

       nn      The number of characters written so  far  is  stored  into  the
              integer  indicated  by the _i_n_t _* (or variant) pointer argument.
              No argument is converted.

       mm      (Glibc extension.)  Print output of _s_t_r_e_r_r_o_r_(_e_r_r_n_o_).  No  argu‐
              ment is required.

       %%      A '%' is written.  No argument is converted.  The complete con‐
              version specification is '%%'.

CCOONNFFOORRMMIINNGG TTOO
       The  ffpprriinnttff(),  pprriinnttff(),  sspprriinnttff(),  vvpprriinnttff(),   vvffpprriinnttff(),   and
       vvsspprriinnttff()  functions  conform  to  C89  and  C99.  The ssnnpprriinnttff() and
       vvssnnpprriinnttff() functions conform to C99.

       Concerning the return value of ssnnpprriinnttff(), SUSv2  and  C99  contradict
       each  other:  when  ssnnpprriinnttff() is called with _s_i_z_e=0 then SUSv2 stipu‐
       lates an unspecified return value less than 1, while C99 allows _s_t_r to
       be  NULL  in  this case, and gives the return value (as always) as the
       number of characters that would have been written in case  the  output
       string has been large enough.

       Linux libc4 knows about the five C standard flags.  It knows about the
       length modifiers hh, ll, LL, and the conversions cc, dd, ee, EE, ff, FF, gg,  GG,
       ii, nn, oo, pp, ss, uu, xx, and XX, where FF is a synonym for ff.  Additionally,
       it accepts DD, OO, and UU as synonyms for lldd, lloo, and lluu.  (This is  bad,
       and  caused  serious bugs later, when support for %%DD disappeared.)  No
       locale-dependent radix character, no thousands' separator, no  NaN  or
       infinity, no "%m$" and "*m$".

       Linux  libc5  knows  about  the  five C standard flags and the ' flag,
       locale, "%m$" and "*m$".  It knows about the length modifiers hh, ll, LL,
       ZZ,  and  qq, but accepts LL and qq both for _l_o_n_g _d_o_u_b_l_e and for _l_o_n_g _l_o_n_g
       _i_n_t (this is a bug).  It no longer recognizes FF, DD, OO, and UU, but adds
       the conversion character mm, which outputs _s_t_r_e_r_r_o_r_(_e_r_r_n_o_).

       glibc 2.0 adds conversion characters CC and SS.

       glibc 2.1 adds length modifiers hhhh, jj, tt, and zz and conversion charac‐
       ters aa and AA.

       glibc 2.2 adds the conversion character FF with C99 semantics, and  the
       flag character II.

NNOOTTEESS
       Some programs imprudently rely on code such as the following

           sprintf(buf, "%s some further text", buf);

       to  append  text  to _b_u_f.  However, the standards explicitly note that
       the results are undefined if source and  destination  buffers  overlap
       when  calling  sspprriinnttff(),  ssnnpprriinnttff(),  vvsspprriinnttff(),  and  vvssnnpprriinnttff().
       Depending on the version of ggcccc(1)  used,  and  the  compiler  options
       employed,  calls  such  as  the  above  will  nnoott produce the expected
       results.

       The glibc implementation of the functions ssnnpprriinnttff()  and  vvssnnpprriinnttff()
       conforms  to  the  C99  standard, that is, behaves as described above,
       since glibc version 2.1.  Until glibc 2.0.6 they would return -1  when
       the output was truncated.

BBUUGGSS
       Because  sspprriinnttff()  and  vvsspprriinnttff() assume an arbitrarily long string,
       callers must be careful not to overflow  the  actual  space;  this  is
       often  impossible to assure.  Note that the length of the strings pro‐
       duced is locale-dependent and difficult to  predict.   Use  ssnnpprriinnttff()
       and vvssnnpprriinnttff() instead (or aasspprriinnttff(3) and vvaasspprriinnttff(3)).

       Linux  libc4.[45]  does  not  have a ssnnpprriinnttff(), but provides a libbsd
       that contains an ssnnpprriinnttff() equivalent to sspprriinnttff(), that is, one that
       ignores  the  _s_i_z_e  argument.   Thus, the use of ssnnpprriinnttff() with early
       libc4 leads to serious security problems.

       Code such as pprriinnttff((_f_o_o));; often indicates a bug, since _f_o_o may contain
       a % character.  If _f_o_o comes from untrusted user input, it may contain
       %%nn, causing the pprriinnttff() call to write to memory and creating a  secu‐
       rity hole.

EEXXAAMMPPLLEE
       To print _P_i to five decimal places:

           #include <math.h>
           #include <stdio.h>
           fprintf(stdout, "pi = %.5f\n", 4 * atan(1.0));

       To  print  a  date and time in the form "Sunday, July 3, 10:02", where
       _w_e_e_k_d_a_y and _m_o_n_t_h are pointers to strings:

           #include <stdio.h>
           fprintf(stdout, "%s, %s %d, %.2d:%.2d\n",
                   weekday, month, day, hour, min);

       Many countries use the day-month-year order.  Hence, an international‐
       ized version must be able to print the arguments in an order specified
       by the format:

           #include <stdio.h>
           fprintf(stdout, format,
                   weekday, month, day, hour, min);

       where _f_o_r_m_a_t depends on locale, and may permute the  arguments.   With
       the value:

           "%1$s, %3$d. %2$s, %4$d:%5$.2d\n"

       one might obtain "Sonntag, 3. Juli, 10:02".

       To  allocate  a sufficiently large string and print into it (code cor‐
       rect for both glibc 2.0 and glibc 2.1):

       If truncation occurs in glibc versions prior to 2.0.6, this is treated
       as an error instead of being handled gracefully.

       #include <stdio.h>
       #include <stdlib.h>
       #include <stdarg.h>

       char *
       make_message(const char *fmt, ...)
       {
           int n;
           int size = 100;     /* Guess we need no more than 100 bytes */
           char *p, *np;
           va_list ap;

           if ((p = malloc(size)) == NULL)
               return NULL;

           while (1) {

               /* Try to print in the allocated space */

               va_start(ap, fmt);
               n = vsnprintf(p, size, fmt, ap);
               va_end(ap);

               /* Check error code */

               if (n < 0)
                   return NULL;

               /* If that worked, return the string */

               if (n < size)
                   return p;

               /* Else try again with more space */

               size = n + 1;       /* Precisely what is needed */


               if ((np = realloc (p, size)) == NULL) {
                   free(p);
                   return NULL;
               } else {
                   p = np;
               }
           }
       }

SSEEEE AALLSSOO
       pprriinnttff(1),   aasspprriinnttff(3),  ddpprriinnttff(3),  ssccaannff(3),  sseettllooccaallee(3),  wwccrr‐‐
       ttoommbb(3), wwpprriinnttff(3), llooccaallee(5)

CCOOLLOOPPHHOONN
       This page is part of release 3.54 of the Linux _m_a_n_-_p_a_g_e_s  project.   A
       description  of the project, and information about reporting bugs, can
       be found at http://www.kernel.org/doc/man-pages/.



GNU                               2013-09-04                        PRINTF(3)
